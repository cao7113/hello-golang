# https://help.github.com/en/github/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions
name: Try Github Actions
on:
  push:
    branches:
      - actions
    tags:
      - 'ci*'
  pull_request:
    branches:
      - actions
  # https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#schedule
  # schedule:
  #  - cron: '3/5 * * * *'

jobs:
  github-actions-env:
    name: try github-actions env
    runs-on: ubuntu-latest
    steps:
    - name: inspect env
      run: printenv | sort
    # env-var: https://docs.github.com/en/actions/learn-github-actions/environment-variables
    - name: show actions specific env
      run: |
        echo "CI=$CI"
        echo "GITHUB_WORKFLOW=$GITHUB_WORKFLOW"
        echo "GITHUB_RUN_ID=$GITHUB_RUN_ID"
        echo "GITHUB_REF_NAME=$GITHUB_REF_NAME"
        
        echo "context github.repository = ${{ github.repository }}"
        echo "context github.ref_name = ${{ github.ref_name }}"
    # context: https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Dump job context
      env:
        JOB_CONTEXT: ${{ toJSON(job) }}
      run: echo "$JOB_CONTEXT"
    - name: Dump steps context
      env:
        STEPS_CONTEXT: ${{ toJSON(steps) }}
      run: echo "$STEPS_CONTEXT"
    - name: Dump runner context
      env:
        RUNNER_CONTEXT: ${{ toJSON(runner) }}
      run: echo "$RUNNER_CONTEXT"
    - name: Dump strategy context
      env:
        STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
      run: echo "$STRATEGY_CONTEXT"
    - name: Dump matrix context
      env:
        MATRIX_CONTEXT: ${{ toJSON(matrix) }}
      run: echo "$MATRIX_CONTEXT"

  notify-people:
    runs-on: ubuntu-latest
    steps:
      - name: hi
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{"msg_type": "post", "content": {"post": {"zh_cn": {"title": "Try Github Actions","content": [[{"tag":"text", "text": "测试消息:" },{ "tag": "a","text": "Repo", "href": "${{github.server_url}}/${{github.repository}}"}]]}}}}' https://open.larksuite.com/open-apis/bot/v2/hook/${{ secrets.LARK_WEBHOOK_SECRET }}

  pr-notify:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == "pull_request" && github.ref_name == 'actions'}}
    steps:
      - name: notify
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{"msg_type": "post", "content": {"post": {"zh_cn": {"title": "Try Github Actions","content": [[{"tag":"text", "text": "PR#${{github.event.number}} ${{github.event.action}}" },{ "tag": "a","text": "Repo", "href": "${{github.event.pull_request.html_url}}"}]]}}}}' https://open.larksuite.com/open-apis/bot/v2/hook/${{ secrets.LARK_WEBHOOK_SECRET }}

#  node-docker:
#    runs-on: ubuntu-latest
#    container:
#      image: node:14.15.0-alpine3.12
#    steps:
#      - name: Log the parent container node version
#        run: |
#          node -v
#        # Echo the node version of the parent container
#
#      - name: Log the step container node version
#        uses: docker://node:12.14.1-alpine3.10
#        with:
#          entrypoint: /usr/local/bin/node
#          args: -v
#          # Echo the node version of this step container based on this 12.14.1-alpine3.10 image
#
#      - name: Step with docker to echo a string
#        uses: docker://node:12.14.1-alpine3.10
#        with:
#          entrypoint: /bin/echo
#          args: Hello Docker !

#  es-container-lab:
#    # https://hub.docker.com/_/elasticsearch
#    # https://www.docker.elastic.co/r/elasticsearch
#    name: try es container service
#    runs-on: ubuntu-latest
#    services:
#      es:
#        image: docker.elastic.co/elasticsearch/elasticsearch:7.16.1
#        env:
#          discovery.type: single-node
#        options: >-
#          --health-cmd "curl http://localhost:9200/_cluster/health"
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 10
#        ports:
#          - 9200:9200
#    steps:
#      - name: try to connect
#        run: curl http://localhost:9200

#  es-actions:
#    # https://github.com/elastic/elastic-github-actions/tree/master/elasticsearch
#    name: try es in github-actions
#    runs-on: ubuntu-latest
#    steps:
#    - name: Configure sysctl limits
#      run: |
#        sudo swapoff -a
#        sudo sysctl -w vm.swappiness=1
#        sudo sysctl -w fs.file-max=262144
#        sudo sysctl -w vm.max_map_count=262144
#
#    - name: Runs Elasticsearch
#      uses: elastic/elastic-github-actions/elasticsearch@master
#      with:
#        stack-version: 7.6.0
#    - name: try to connect
#      run: curl http://localhost:9200

#  redis-service:
#    # https://docs.github.com/en/actions/using-containerized-services/creating-redis-service-containers
#    name: try redis service container
#    runs-on: ubuntu-latest
#    services:
#      redis:
#        image: redis
#        # Set health checks to wait until redis has started
#        options: >-
#          --health-cmd "redis-cli ping"
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#        ports:
#          - 6379
#    steps:
#    - name: try to connect redis
#      run: |
#        # sudo apt-get update
#        sudo apt-get install -y redis-tools
#        echo redis service on ${{ job.services.redis.ports[6379] }}
#        redis-cli --version
#        redis-cli -p ${{ job.services.redis.ports[6379] }} -h localhost set test hi-redis
#        redis-cli -p ${{ job.services.redis.ports[6379] }} -h localhost get test

#  builtin-mysql-on-ubuntu-1804:
#    # Note: 18.04 has built-in mysql-5.7 service installed (not started)
#    # https://github.com/actions/virtual-environments/blob/ubuntu20/20211129.1/images/linux/Ubuntu1804-README.md#mysql
#    # command password setting https://stackoverflow.com/questions/20751352/suppress-warning-messages-using-mysql-from-within-terminal-but-password-written
#    name: try built-in mysql-5.7 service on ubuntu-18.04
#    runs-on: ubuntu-18.04
#    steps:
#      - name: Start MySQL Service
#        run: |
#          sudo systemctl start mysql.service
#          #sudo cat /etc/mysql/debian.cnf
#          cat <<-CFG > /tmp/my.cnf
#          [client]
#          user = "root"
#          password = "root"
#          host = "localhost"
#          CFG
#          mysql --version
#          mysql --defaults-extra-file=/tmp/my.cnf -e "select version();"
#          mysql --defaults-extra-file=/tmp/my.cnf -e "show databases;"

#  mysql-container-service:
#    name: try conatinerized mysql-5.7 service
#    runs-on: ubuntu-latest
#    services:
#      mysql:
#        image: mysql:5.7
#        env:
#          MYSQL_DATABASE: try_it
#          MYSQL_ROOT_PASSWORD: root
#        ports:
#          - 3306
#        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
#    steps:
#      - name: try to connect
#        run: |
#          echo mysql service running on port: ${{ job.services.mysql.ports['3306'] }}
#          cat <<-CFG > /tmp/my.cnf
#          [client]
#          user = "root"
#          password = "root"
#          host = "127.0.0.1"
#          port = "${{ job.services.mysql.ports['3306'] }}"
#          CFG
#          cat /tmp/my.cnf
#          mysql --version
#          mysql --defaults-extra-file=/tmp/my.cnf -e "select version();"
#          mysql --defaults-extra-file=/tmp/my.cnf -e "show databases;"

#  go-task:
#    name: try go-task
#    runs-on: ubuntu-latest
#    steps:
#      # https://github.com/arduino/setup-task
#      # https://github.com/marketplace/actions/arduino-setup-task
#      - name: Install Task
#        uses: arduino/setup-task@v1
#      - name: Show task version
#        run: |
#          which task
#          task --version
#          echo PATH=$PATH

#  docker:
#    name: Docker
#    runs-on: ubuntu-20.04
#    steps:
#      - name: inspect docker env
#        run: |
#          docker version
#          docker compose version
