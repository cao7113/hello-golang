// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package streamv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamServiceClient interface {
	// Hi is server stream
	Hi(ctx context.Context, in *HiRequest, opts ...grpc.CallOption) (StreamService_HiClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (StreamService_ClientStreamClient, error)
	BiStream(ctx context.Context, opts ...grpc.CallOption) (StreamService_BiStreamClient, error)
}

type streamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServiceClient(cc grpc.ClientConnInterface) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) Hi(ctx context.Context, in *HiRequest, opts ...grpc.CallOption) (StreamService_HiClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[0], "/grpc.stream.v1.StreamService/Hi", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceHiClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamService_HiClient interface {
	Recv() (*HiResponse, error)
	grpc.ClientStream
}

type streamServiceHiClient struct {
	grpc.ClientStream
}

func (x *streamServiceHiClient) Recv() (*HiResponse, error) {
	m := new(HiResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (StreamService_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[1], "/grpc.stream.v1.StreamService/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceClientStreamClient{stream}
	return x, nil
}

type StreamService_ClientStreamClient interface {
	Send(*ClientStreamRequest) error
	CloseAndRecv() (*ClientStreamResponse, error)
	grpc.ClientStream
}

type streamServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *streamServiceClientStreamClient) Send(m *ClientStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceClientStreamClient) CloseAndRecv() (*ClientStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamServiceClient) BiStream(ctx context.Context, opts ...grpc.CallOption) (StreamService_BiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[2], "/grpc.stream.v1.StreamService/BiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceBiStreamClient{stream}
	return x, nil
}

type StreamService_BiStreamClient interface {
	Send(*BiStreamRequest) error
	Recv() (*BiStreamResponse, error)
	grpc.ClientStream
}

type streamServiceBiStreamClient struct {
	grpc.ClientStream
}

func (x *streamServiceBiStreamClient) Send(m *BiStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceBiStreamClient) Recv() (*BiStreamResponse, error) {
	m := new(BiStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServiceServer is the server API for StreamService service.
// All implementations must embed UnimplementedStreamServiceServer
// for forward compatibility
type StreamServiceServer interface {
	// Hi is server stream
	Hi(*HiRequest, StreamService_HiServer) error
	ClientStream(StreamService_ClientStreamServer) error
	BiStream(StreamService_BiStreamServer) error
	mustEmbedUnimplementedStreamServiceServer()
}

// UnimplementedStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamServiceServer struct {
}

func (UnimplementedStreamServiceServer) Hi(*HiRequest, StreamService_HiServer) error {
	return status.Errorf(codes.Unimplemented, "method Hi not implemented")
}
func (UnimplementedStreamServiceServer) ClientStream(StreamService_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedStreamServiceServer) BiStream(StreamService_BiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BiStream not implemented")
}
func (UnimplementedStreamServiceServer) mustEmbedUnimplementedStreamServiceServer() {}

// UnsafeStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServiceServer will
// result in compilation errors.
type UnsafeStreamServiceServer interface {
	mustEmbedUnimplementedStreamServiceServer()
}

func RegisterStreamServiceServer(s grpc.ServiceRegistrar, srv StreamServiceServer) {
	s.RegisterService(&StreamService_ServiceDesc, srv)
}

func _StreamService_Hi_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HiRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).Hi(m, &streamServiceHiServer{stream})
}

type StreamService_HiServer interface {
	Send(*HiResponse) error
	grpc.ServerStream
}

type streamServiceHiServer struct {
	grpc.ServerStream
}

func (x *streamServiceHiServer) Send(m *HiResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).ClientStream(&streamServiceClientStreamServer{stream})
}

type StreamService_ClientStreamServer interface {
	SendAndClose(*ClientStreamResponse) error
	Recv() (*ClientStreamRequest, error)
	grpc.ServerStream
}

type streamServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *streamServiceClientStreamServer) SendAndClose(m *ClientStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceClientStreamServer) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamService_BiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).BiStream(&streamServiceBiStreamServer{stream})
}

type StreamService_BiStreamServer interface {
	Send(*BiStreamResponse) error
	Recv() (*BiStreamRequest, error)
	grpc.ServerStream
}

type streamServiceBiStreamServer struct {
	grpc.ServerStream
}

func (x *streamServiceBiStreamServer) Send(m *BiStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceBiStreamServer) Recv() (*BiStreamRequest, error) {
	m := new(BiStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamService_ServiceDesc is the grpc.ServiceDesc for StreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.stream.v1.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Hi",
			Handler:       _StreamService_Hi_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _StreamService_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BiStream",
			Handler:       _StreamService_BiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/stream/v1/stream.proto",
}
