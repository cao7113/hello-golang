// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tryv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TryServiceClient is the client API for TryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TryServiceClient interface {
	Try(ctx context.Context, in *TryRequest, opts ...grpc.CallOption) (*TryResponse, error)
	Timeout(ctx context.Context, in *TimeoutRequest, opts ...grpc.CallOption) (*TimeoutResponse, error)
	Slow(ctx context.Context, in *SlowRequest, opts ...grpc.CallOption) (*SlowResponse, error)
	Fibonacci(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (*FibonacciResponse, error)
	DetailError(ctx context.Context, in *DetailErrorRequest, opts ...grpc.CallOption) (*DetailErrorResponse, error)
	Fatal(ctx context.Context, in *FatalRequest, opts ...grpc.CallOption) (*FatalResponse, error)
}

type tryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTryServiceClient(cc grpc.ClientConnInterface) TryServiceClient {
	return &tryServiceClient{cc}
}

func (c *tryServiceClient) Try(ctx context.Context, in *TryRequest, opts ...grpc.CallOption) (*TryResponse, error) {
	out := new(TryResponse)
	err := c.cc.Invoke(ctx, "/grpc.try.v1.TryService/Try", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tryServiceClient) Timeout(ctx context.Context, in *TimeoutRequest, opts ...grpc.CallOption) (*TimeoutResponse, error) {
	out := new(TimeoutResponse)
	err := c.cc.Invoke(ctx, "/grpc.try.v1.TryService/Timeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tryServiceClient) Slow(ctx context.Context, in *SlowRequest, opts ...grpc.CallOption) (*SlowResponse, error) {
	out := new(SlowResponse)
	err := c.cc.Invoke(ctx, "/grpc.try.v1.TryService/Slow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tryServiceClient) Fibonacci(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (*FibonacciResponse, error) {
	out := new(FibonacciResponse)
	err := c.cc.Invoke(ctx, "/grpc.try.v1.TryService/Fibonacci", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tryServiceClient) DetailError(ctx context.Context, in *DetailErrorRequest, opts ...grpc.CallOption) (*DetailErrorResponse, error) {
	out := new(DetailErrorResponse)
	err := c.cc.Invoke(ctx, "/grpc.try.v1.TryService/DetailError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tryServiceClient) Fatal(ctx context.Context, in *FatalRequest, opts ...grpc.CallOption) (*FatalResponse, error) {
	out := new(FatalResponse)
	err := c.cc.Invoke(ctx, "/grpc.try.v1.TryService/Fatal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TryServiceServer is the server API for TryService service.
// All implementations must embed UnimplementedTryServiceServer
// for forward compatibility
type TryServiceServer interface {
	Try(context.Context, *TryRequest) (*TryResponse, error)
	Timeout(context.Context, *TimeoutRequest) (*TimeoutResponse, error)
	Slow(context.Context, *SlowRequest) (*SlowResponse, error)
	Fibonacci(context.Context, *FibonacciRequest) (*FibonacciResponse, error)
	DetailError(context.Context, *DetailErrorRequest) (*DetailErrorResponse, error)
	Fatal(context.Context, *FatalRequest) (*FatalResponse, error)
	mustEmbedUnimplementedTryServiceServer()
}

// UnimplementedTryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTryServiceServer struct {
}

func (UnimplementedTryServiceServer) Try(context.Context, *TryRequest) (*TryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Try not implemented")
}
func (UnimplementedTryServiceServer) Timeout(context.Context, *TimeoutRequest) (*TimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Timeout not implemented")
}
func (UnimplementedTryServiceServer) Slow(context.Context, *SlowRequest) (*SlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Slow not implemented")
}
func (UnimplementedTryServiceServer) Fibonacci(context.Context, *FibonacciRequest) (*FibonacciResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fibonacci not implemented")
}
func (UnimplementedTryServiceServer) DetailError(context.Context, *DetailErrorRequest) (*DetailErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailError not implemented")
}
func (UnimplementedTryServiceServer) Fatal(context.Context, *FatalRequest) (*FatalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fatal not implemented")
}
func (UnimplementedTryServiceServer) mustEmbedUnimplementedTryServiceServer() {}

// UnsafeTryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TryServiceServer will
// result in compilation errors.
type UnsafeTryServiceServer interface {
	mustEmbedUnimplementedTryServiceServer()
}

func RegisterTryServiceServer(s grpc.ServiceRegistrar, srv TryServiceServer) {
	s.RegisterService(&TryService_ServiceDesc, srv)
}

func _TryService_Try_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TryServiceServer).Try(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.try.v1.TryService/Try",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TryServiceServer).Try(ctx, req.(*TryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TryService_Timeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TryServiceServer).Timeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.try.v1.TryService/Timeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TryServiceServer).Timeout(ctx, req.(*TimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TryService_Slow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TryServiceServer).Slow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.try.v1.TryService/Slow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TryServiceServer).Slow(ctx, req.(*SlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TryService_Fibonacci_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FibonacciRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TryServiceServer).Fibonacci(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.try.v1.TryService/Fibonacci",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TryServiceServer).Fibonacci(ctx, req.(*FibonacciRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TryService_DetailError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TryServiceServer).DetailError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.try.v1.TryService/DetailError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TryServiceServer).DetailError(ctx, req.(*DetailErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TryService_Fatal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FatalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TryServiceServer).Fatal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.try.v1.TryService/Fatal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TryServiceServer).Fatal(ctx, req.(*FatalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TryService_ServiceDesc is the grpc.ServiceDesc for TryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.try.v1.TryService",
	HandlerType: (*TryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Try",
			Handler:    _TryService_Try_Handler,
		},
		{
			MethodName: "Timeout",
			Handler:    _TryService_Timeout_Handler,
		},
		{
			MethodName: "Slow",
			Handler:    _TryService_Slow_Handler,
		},
		{
			MethodName: "Fibonacci",
			Handler:    _TryService_Fibonacci_Handler,
		},
		{
			MethodName: "DetailError",
			Handler:    _TryService_DetailError_Handler,
		},
		{
			MethodName: "Fatal",
			Handler:    _TryService_Fatal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/try/v1/try.proto",
}
